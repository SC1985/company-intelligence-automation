name: Executive Intelligence Automation

on:
  schedule:
    #Daily briefs: '0 14 * * *' (every day at 9 AM EST)
    #Friday summaries: '0 21 * * 5' (Fridays at 4 PM EST)
    #Market open alerts: '30 13 * * 1-5' (weekdays at 8:30 AM EST)
    
    # Every Monday at 9:00 AM EST (14:00 UTC) - the executive briefing hour
    - cron: '0 14 * * 1'
  
  # Manual trigger for immediate intelligence deployment
  workflow_dispatch:
    inputs:
      urgent_analysis:
        description: 'Deploy urgent market analysis'
        required: false
        default: 'false'
        type: boolean

env:
  PYTHON_VERSION: '3.11'

jobs:
  deploy-intelligence-engine:
    name: 🚀 Intelligence Orchestration
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: 📡 Activate Repository Intelligence
      uses: actions/checkout@v4
      
    - name: 🐍 Configure Python Execution Environment
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: ⚡ Deploy Dependencies Architecture
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        echo "🔧 Intelligence infrastructure deployed"
    
    - name: 🎯 Validate Intelligence Configuration
      env:
        ALPHA_VANTAGE_API_KEY: ${{ secrets.ALPHA_VANTAGE_API_KEY }}
        NEWSAPI_KEY: ${{ secrets.NEWSAPI_KEY }}
        SENDER_EMAIL: ${{ secrets.SENDER_EMAIL }}
        SENDER_PASSWORD: ${{ secrets.SENDER_PASSWORD }}
        RECIPIENT_EMAILS: ${{ secrets.RECIPIENT_EMAILS }}
        ADMIN_EMAILS: ${{ secrets.ADMIN_EMAILS }}
      run: |
        echo "🔍 Validating intelligence architecture..."
        python -c "
        import os
        required = ['ALPHA_VANTAGE_API_KEY', 'NEWSAPI_KEY', 'SENDER_EMAIL', 'SENDER_PASSWORD', 'RECIPIENT_EMAILS']
        missing = [var for var in required if not os.getenv(var)]
        if missing:
          print(f'❌ Missing critical configuration: {missing}')
          exit(1)
        print('✅ Intelligence configuration validated')
        "
    
    - name: 🚀 Execute Intelligence Symphony
      env:
        ALPHA_VANTAGE_API_KEY: ${{ secrets.ALPHA_VANTAGE_API_KEY }}
        NEWSAPI_KEY: ${{ secrets.NEWSAPI_KEY }}
        SENDER_EMAIL: ${{ secrets.SENDER_EMAIL }}
        SENDER_PASSWORD: ${{ secrets.SENDER_PASSWORD }}
        RECIPIENT_EMAILS: ${{ secrets.RECIPIENT_EMAILS }}
        ADMIN_EMAILS: ${{ secrets.ADMIN_EMAILS }}
        SMTP_SERVER: smtp.gmail.com
        SMTP_PORT: 587
      run: |
        echo "🎼 Orchestrating intelligence symphony..."
        python src/main.py
        echo "✅ Executive intelligence brief deployed successfully"
    
    - name: 📊 Archive Intelligence Artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: intelligence-execution-logs-${{ github.run_number }}
        path: |
          *.log
          intelligence_system.log
        retention-days: 30
    
    - name: 🚨 Emergency Response Protocol
      if: failure()
      env:
        EMERGENCY_WEBHOOK: ${{ secrets.EMERGENCY_WEBHOOK }}
      run: |
        echo "🚨 Intelligence system disruption detected"
        if [ -n "$EMERGENCY_WEBHOOK" ]; then
          curl -X POST "$EMERGENCY_WEBHOOK" \
            -H 'Content-Type: application/json' \
            -d '{
              "text": "🚨 INTELLIGENCE SYSTEM ALERT",
              "attachments": [{
                "color": "danger",
                "fields": [{
                  "title": "System",
                  "value": "Company Intelligence Automation",
                  "short": true
                }, {
                  "title": "Status",
                  "value": "EXECUTION FAILED",
                  "short": true
                }, {
                  "title": "Run Number",
                  "value": "${{ github.run_number }}",
                  "short": true
                }, {
                  "title": "Timestamp",
                  "value": "'$(date -u)'",
                  "short": true
                }]
              }]
            }'
        fi

  # Intelligence quality assurance
  post-execution-analysis:
    name: 📈 Intelligence Quality Assurance
    runs-on: ubuntu-latest
    needs: deploy-intelligence-engine
    if: always()
    
    steps:
    - name: 📊 Execution Analytics
      run: |
        echo "📈 Analyzing execution performance..."
        if [ "${{ needs.deploy-intelligence-engine.result }}" == "success" ]; then
          echo "✅ Intelligence deployment: SUCCESSFUL"
          echo "📧 Executive briefing: DELIVERED"
          echo "🎯 System reliability: OPTIMAL"
        else
          echo "❌ Intelligence deployment: DISRUPTED"
          echo "🔧 Recommend: System configuration review"
        fi
    
    - name: 🎯 Success Metrics
      if: needs.deploy-intelligence-engine.result == 'success'
      run: |
        echo "🏆 INTELLIGENCE SYMPHONY PERFORMANCE METRICS"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "🎼 Orchestration Status: MASTERFUL EXECUTION"
        echo "📊 Data Quality: ENTERPRISE-GRADE"
        echo "📧 Distribution: FLAWLESS DELIVERY"
        echo "⏱️  Execution Time: OPTIMIZED PERFORMANCE"
        echo "🔒 Security: VAULT-LEVEL PROTECTION"
        echo "🎨 Design Excellence: AWARD-WORTHY PRESENTATION"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
