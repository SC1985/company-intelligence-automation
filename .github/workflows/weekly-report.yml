name: Executive Intelligence Automation

on:
  schedule:
    # Every Monday at 9:00 AM EST (14:00 UTC)
    - cron: '0 14 * * 1'
  
  # Manual trigger for testing
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Run in test mode'
        required: false
        default: 'false'
        type: boolean

env:
  PYTHON_VERSION: '3.11'

jobs:
  generate-and-send-report:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: üì° Activate Repository Intelligence
      uses: actions/checkout@v4
      
    - name: üêç Configure Python Execution Environment
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: ‚ö° Deploy Dependencies Architecture
      run: |
        python -m pip install --upgrade pip
        pip install aiohttp
        echo "üîß Intelligence infrastructure deployed"
    
    - name: üéØ Validate Intelligence Configuration
      env:
        ALPHA_VANTAGE_API_KEY: ${{ secrets.ALPHA_VANTAGE_API_KEY }}
        NEWSAPI_KEY: ${{ secrets.NEWSAPI_KEY }}
        SENDER_EMAIL: ${{ secrets.SENDER_EMAIL }}
        SENDER_PASSWORD: ${{ secrets.SENDER_PASSWORD }}
        RECIPIENT_EMAILS: ${{ secrets.RECIPIENT_EMAILS }}
        ADMIN_EMAILS: ${{ secrets.ADMIN_EMAILS }}
      run: |
        echo "üîç Validating intelligence architecture..."
        python -c "
        import os
        required = ['SENDER_EMAIL', 'SENDER_PASSWORD', 'RECIPIENT_EMAILS']
        missing = [var for var in required if not os.getenv(var)]
        if missing:
          print(f'‚ùå Missing critical configuration: {missing}')
          exit(1)
        print('‚úÖ Intelligence configuration validated')
        "
    
    - name: üöÄ Execute Intelligence Symphony
      env:
        ALPHA_VANTAGE_API_KEY: ${{ secrets.ALPHA_VANTAGE_API_KEY }}
        NEWSAPI_KEY: ${{ secrets.NEWSAPI_KEY }}
        SENDER_EMAIL: ${{ secrets.SENDER_EMAIL }}
        SENDER_PASSWORD: ${{ secrets.SENDER_PASSWORD }}
        RECIPIENT_EMAILS: ${{ secrets.RECIPIENT_EMAILS }}
        ADMIN_EMAILS: ${{ secrets.ADMIN_EMAILS }}
        SMTP_SERVER: smtp.gmail.com
        SMTP_PORT: 587
      run: |
        echo "üéº Orchestrating intelligence symphony..."
        python src/main.py
        echo "‚úÖ Executive intelligence brief deployed successfully"
    
    - name: üìä Archive Intelligence Artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: intelligence-execution-logs-${{ github.run_number }}
        path: |
          *.log
          intelligence_system.log
        retention-days: 30
    
    - name: üö® Emergency Response Protocol
      if: failure()
      run: |
        echo "üö® Intelligence system disruption detected"
        echo "Check the logs above for detailed error information"
